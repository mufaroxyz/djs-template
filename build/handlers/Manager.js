Object.defineProperty(exports,"__esModule",{value:true});function _export(target,all){for(var name in all)Object.defineProperty(target,name,{enumerable:true,get:all[name]})}_export(exports,{methodLog:()=>methodLog,Manager:()=>Manager});const _baseManager=require("./BaseManager");const _logs=_interopRequireDefault(require("../services/logs"));const _chalk=_interopRequireDefault(require("chalk"));const _perfHooks=require("perf_hooks");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function methodLog(target,methodName,descriptor){const originalMethod=descriptor.value;descriptor.value=function(...args){const perfStart=_perfHooks.performance.now();const result=originalMethod.apply(this,args);const perfEnd=_perfHooks.performance.now();_logs.default.customLog(`Method ${_chalk.default.white("[")}${_chalk.default.magenta(methodName)}:${_chalk.default.magentaBright(this.constructor.name)}${_chalk.default.white("]")} executed within ${Math.round((perfEnd-perfStart)*100)/100}s with args ${args.map(arg=>_chalk.default.yellow(arg))}`,"AltheaModule");return result};return descriptor}class Manager extends _baseManager.BaseManager{constructor(name,client){super(client);this.managerName=name;this.init()}async init(){console.log(`Initialized ${this.managerName}...`)}}
//# sourceMappingURL=Manager.js.map