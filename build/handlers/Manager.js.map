{"version":3,"sources":["../../src/handlers/Manager.ts"],"sourcesContent":["import { BaseManager } from \"./BaseManager\";\nimport { MufaroClient } from \"../extensions/mufaroClient\";\nimport Log from \"../services/logs\";\nimport chalk from \"chalk\";\nimport { performance } from \"perf_hooks\";\n\n// export function methodLog<\n//   This,\n//   Args extends any[],\n//   Return,\n//   Fn extends (this: This, ...args: Args) => Return\n// >(target: Fn, ctx: ClassMethodDecoratorContext<This, Fn>) {\n//   const methodName = String(ctx.name);\n//   function callMethod(this: This, ...args: Args): Return {\n//     const perfStart = performance.now();\n//     const result = target.call(this, ...args);\n//     const perfEnd = performance.now();\n//     const className = Object.getPrototypeOf(this).constructor.name;\n//     Log.customLog(\n//       `Method ${chalk.white(\"[\")}${chalk.magenta(\n//         methodName\n//       )}:${chalk.magentaBright(className)}${chalk.white(\"]\")} executed within ${\n//         perfEnd - perfStart\n//       } with ${args.map((arg) => chalk.yellow(arg))})}`,\n//       \"AltheaModule\"\n//     );\n//     return result;\n//   }\n//   return callMethod;\n// }\n\nexport function methodLog<Return>(\n  // @ts-ignore\n  target: any,\n  methodName: string,\n  descriptor: PropertyDescriptor\n): PropertyDescriptor {\n  const originalMethod = descriptor.value;\n  descriptor.value = function (...args: any[]): Return {\n    const perfStart = performance.now();\n    const result = originalMethod.apply(this, args);\n    const perfEnd = performance.now();\n\n    Log.customLog(\n      `Method ${chalk.white(\"[\")}${chalk.magenta(\n        methodName\n      )}:${chalk.magentaBright(this.constructor.name)}${chalk.white(\n        \"]\"\n      )} executed within ${\n        Math.round((perfEnd - perfStart) * 100) / 100\n      }s with args ${args.map((arg) => chalk.yellow(arg))}`,\n      \"AltheaModule\"\n    );\n    return result;\n  };\n  return descriptor;\n}\n\nexport class Manager extends BaseManager {\n  public managerName: string;\n\n  constructor(name: string, client: MufaroClient) {\n    super(client);\n    this.managerName = name;\n    this.init();\n  }\n  public async init(): Promise<void> {\n    console.log(`Initialized ${this.managerName}...`);\n  }\n}\n"],"names":["methodLog","Manager","target","methodName","descriptor","originalMethod","value","args","perfStart","performance","now","result","apply","perfEnd","Log","customLog","chalk","white","magenta","magentaBright","constructor","name","Math","round","map","arg","yellow","BaseManager","client","managerName","init","console","log"],"mappings":"8LA+BgBA,SAAS,KAATA,UA2BHC,OAAO,KAAPA,qCA1De,4DAEZ,iEACE,mCACU,gGA2BrB,SAASD,UAEdE,MAAW,CACXC,UAAkB,CAClBC,UAA8B,CACV,CACpB,MAAMC,eAAiBD,WAAWE,KAAK,AACvCF,CAAAA,WAAWE,KAAK,CAAG,SAAU,GAAGC,IAAW,CAAU,CACnD,MAAMC,UAAYC,sBAAW,CAACC,GAAG,GACjC,MAAMC,OAASN,eAAeO,KAAK,CAAC,IAAI,CAAEL,MAC1C,MAAMM,QAAUJ,sBAAW,CAACC,GAAG,GAE/BI,aAAG,CAACC,SAAS,CACX,CAAC,OAAO,EAAEC,cAAK,CAACC,KAAK,CAAC,KAAK,EAAED,cAAK,CAACE,OAAO,CACxCf,YACA,CAAC,EAAEa,cAAK,CAACG,aAAa,CAAC,IAAI,CAACC,WAAW,CAACC,IAAI,EAAE,EAAEL,cAAK,CAACC,KAAK,CAC3D,KACA,iBAAiB,EACjBK,KAAKC,KAAK,CAAC,AAACV,CAAAA,QAAUL,SAAQ,EAAK,KAAO,IAC3C,YAAY,EAAED,KAAKiB,GAAG,CAAC,AAACC,KAAQT,cAAK,CAACU,MAAM,CAACD,MAAM,CAAC,CACrD,gBAEF,OAAOd,MACT,EACA,OAAOP,UACT,CAEO,MAAMH,gBAAgB0B,wBAAW,CAGtCP,YAAYC,IAAY,CAAEO,MAAoB,CAAE,CAC9C,KAAK,CAACA,OACN,CAAA,IAAI,CAACC,WAAW,CAAGR,KACnB,IAAI,CAACS,IAAI,EACX,CACA,MAAaA,MAAsB,CACjCC,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAE,IAAI,CAACH,WAAW,CAAC,GAAG,CAAC,CAClD,CACF"}