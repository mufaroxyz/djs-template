{"version":3,"sources":["../../src/services/logger.ts"],"sourcesContent":["import pino from 'pino';\nimport { DiscordAPIError } from 'discord.js';\nimport { Response } from 'node-fetch';\n\nlet logger = pino(\n    {\n        formatters: {\n            level: label => {\n                return { level: label };\n            },\n        },\n    },\n    pino.transport({\n              target: 'pino-pretty',\n              options: {\n                  colorize: true,\n                  ignore: 'pid,hostname',\n                  translateTime: 'yyyy-mm-dd HH:MM:ss.l',\n              },\n          })\n);\n\nexport class Logger {\n    public static info(message: string, obj?: any): void {\n        obj ? logger.info(obj, message) : logger.info(message);\n    }\n\n    public static warn(message: string, obj?: any): void {\n        obj ? logger.warn(obj, message) : logger.warn(message);\n    }\n\n    public static async error(message: string, obj?: any): Promise<void> {\n        if (!obj) {\n            logger.error(message);\n            return;\n        }\n\n        if (typeof obj === 'string') {\n            logger\n                .child({\n                    message: obj,\n                })\n                .error(message);\n        } else if (obj instanceof Response) {\n            let resText: string;\n            try {\n                resText = await obj.text();\n            } catch {\n                // Ignore\n            }\n            logger\n                .child({\n                    path: obj.url,\n                    statusCode: obj.status,\n                    statusName: obj.statusText,\n                    headers: obj.headers.raw(),\n                    body: resText,\n                })\n                .error(message);\n        } else if (obj instanceof DiscordAPIError) {\n            logger\n                .child({\n                    message: obj.message,\n                    code: obj.code,\n                    statusCode: obj.status,\n                    method: obj.method,\n                    url: obj.url,\n                    stack: obj.stack,\n                })\n                .error(message);\n        } else {\n            logger.error(obj, message);\n        }\n    }\n\n}"],"names":["Logger","logger","pino","formatters","level","label","transport","target","options","colorize","ignore","translateTime","info","message","obj","warn","error","child","Response","resText","text","path","url","statusCode","status","statusName","statusText","headers","raw","body","DiscordAPIError","code","method","stack"],"mappings":"uFAsBaA,kCAAAA,oDAtBI,kCACe,uCACP,gGAEzB,IAAIC,OAASC,GAAAA,aAAI,EACb,CACIC,WAAY,CACRC,MAAOC,OAAS,CACZ,MAAO,CAAED,MAAOC,KAAM,CAC1B,CACJ,CACJ,EACAH,aAAI,CAACI,SAAS,CAAC,CACLC,OAAQ,cACRC,QAAS,CACLC,SAAU,IAAI,CACdC,OAAQ,eACRC,cAAe,uBACnB,CACJ,GAGH,OAAMX,OACT,OAAcY,KAAKC,OAAe,CAAEC,GAAS,CAAQ,CACjDA,IAAMb,OAAOW,IAAI,CAACE,IAAKD,SAAWZ,OAAOW,IAAI,CAACC,QAAQ,AAC1D,CAEA,OAAcE,KAAKF,OAAe,CAAEC,GAAS,CAAQ,CACjDA,IAAMb,OAAOc,IAAI,CAACD,IAAKD,SAAWZ,OAAOc,IAAI,CAACF,QAAQ,AAC1D,CAEA,aAAoBG,MAAMH,OAAe,CAAEC,GAAS,CAAiB,CACjE,GAAI,CAACA,IAAK,CACNb,OAAOe,KAAK,CAACH,SACb,MACJ,CAAC,AAED,GAAI,OAAOC,MAAQ,SAAU,CACzBb,OACKgB,KAAK,CAAC,CACHJ,QAASC,GACb,GACCE,KAAK,CAACH,QACf,MAAO,GAAIC,eAAeI,mBAAQ,CAAE,CAChC,IAAIC,QACJ,GAAI,CACAA,QAAU,MAAML,IAAIM,IAAI,EAC5B,CAAE,KAAM,CAER,CACAnB,OACKgB,KAAK,CAAC,CACHI,KAAMP,IAAIQ,GAAG,CACbC,WAAYT,IAAIU,MAAM,CACtBC,WAAYX,IAAIY,UAAU,CAC1BC,QAASb,IAAIa,OAAO,CAACC,GAAG,GACxBC,KAAMV,OACV,GACCH,KAAK,CAACH,QACf,MAAO,GAAIC,eAAegB,0BAAe,CAAE,CACvC7B,OACKgB,KAAK,CAAC,CACHJ,QAASC,IAAID,OAAO,CACpBkB,KAAMjB,IAAIiB,IAAI,CACdR,WAAYT,IAAIU,MAAM,CACtBQ,OAAQlB,IAAIkB,MAAM,CAClBV,IAAKR,IAAIQ,GAAG,CACZW,MAAOnB,IAAImB,KAAK,AACpB,GACCjB,KAAK,CAACH,QACf,KAAO,CACHZ,OAAOe,KAAK,CAACF,IAAKD,QACtB,CAAC,AACL,CAEJ"}