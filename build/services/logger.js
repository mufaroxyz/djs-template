Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"Logger",{enumerable:true,get:()=>Logger});const _pino=_interopRequireDefault(require("pino"));const _discordJs=require("discord.js");const _nodeFetch=require("node-fetch");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}let logger=(0,_pino.default)({formatters:{level:label=>{return{level:label}}}},_pino.default.transport({target:"pino-pretty",options:{colorize:true,ignore:"pid,hostname",translateTime:"yyyy-mm-dd HH:MM:ss.l"}}));class Logger{static info(message,obj){obj?logger.info(obj,message):logger.info(message)}static warn(message,obj){obj?logger.warn(obj,message):logger.warn(message)}static async error(message,obj){if(!obj){logger.error(message);return}if(typeof obj==="string"){logger.child({message:obj}).error(message)}else if(obj instanceof _nodeFetch.Response){let resText;try{resText=await obj.text()}catch{}logger.child({path:obj.url,statusCode:obj.status,statusName:obj.statusText,headers:obj.headers.raw(),body:resText}).error(message)}else if(obj instanceof _discordJs.DiscordAPIError){logger.child({message:obj.message,code:obj.code,statusCode:obj.status,method:obj.method,url:obj.url,stack:obj.stack}).error(message)}else{logger.error(obj,message)}}}
//# sourceMappingURL=logger.js.map