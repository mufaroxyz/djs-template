{"version":3,"sources":["../../src/utils/clientUtils.ts"],"sourcesContent":["import {\n    ApplicationCommand,\n    Channel,\n    Client,\n    DiscordAPIError,\n    RESTJSONErrorCodes as DiscordApiErrors,\n    Guild,\n    GuildMember,\n    NewsChannel,\n    Role,\n    StageChannel,\n    TextChannel,\n    User,\n    VoiceChannel,\n} from 'discord.js';\n\nimport { PermissionUtils, RegexUtils } from './index';\n\nconst FETCH_MEMBER_LIMIT = 20;\nconst IGNORED_ERRORS = [\n    DiscordApiErrors.UnknownMessage,\n    DiscordApiErrors.UnknownChannel,\n    DiscordApiErrors.UnknownGuild,\n    DiscordApiErrors.UnknownMember,\n    DiscordApiErrors.UnknownUser,\n    DiscordApiErrors.UnknownInteraction,\n    DiscordApiErrors.MissingAccess,\n];\n\nexport class ClientUtils {\n    public static async getGuild(client: Client, discordId: string): Promise<Guild> {\n        discordId = RegexUtils.discordId(discordId);\n        if (!discordId) {\n            return;\n        }\n\n        try {\n            return await client.guilds.fetch(discordId);\n        } catch (error) {\n            if (\n                error instanceof DiscordAPIError &&\n                typeof error.code == 'number' &&\n                IGNORED_ERRORS.includes(error.code)\n            ) {\n                return;\n            } else {\n                throw error;\n            }\n        }\n    }\n\n    public static async getChannel(client: Client, discordId: string): Promise<Channel> {\n        discordId = RegexUtils.discordId(discordId);\n        if (!discordId) {\n            return;\n        }\n\n        try {\n            return await client.channels.fetch(discordId);\n        } catch (error) {\n            if (\n                error instanceof DiscordAPIError &&\n                typeof error.code == 'number' &&\n                IGNORED_ERRORS.includes(error.code)\n            ) {\n                return;\n            } else {\n                throw error;\n            }\n        }\n    }\n\n    public static async getUser(client: Client, discordId: string): Promise<User> {\n        discordId = RegexUtils.discordId(discordId);\n        if (!discordId) {\n            return;\n        }\n\n        try {\n            return await client.users.fetch(discordId);\n        } catch (error) {\n            if (\n                error instanceof DiscordAPIError &&\n                typeof error.code == 'number' &&\n                IGNORED_ERRORS.includes(error.code)\n            ) {\n                return;\n            } else {\n                throw error;\n            }\n        }\n    }\n\n    public static async findAppCommand(client: Client, name: string): Promise<ApplicationCommand> {\n        let commands = await client.application.commands.fetch();\n        return commands.find(command => command.name === name);\n    }\n\n    public static async findMember(guild: Guild, input: string): Promise<GuildMember> {\n        try {\n            let discordId = RegexUtils.discordId(input);\n            if (discordId) {\n                return await guild.members.fetch(discordId);\n            }\n\n            let tag = RegexUtils.tag(input);\n            if (tag) {\n                return (\n                    await guild.members.fetch({ query: tag.username, limit: FETCH_MEMBER_LIMIT })\n                ).find(member => member.user.discriminator === tag.discriminator);\n            }\n\n            return (await guild.members.fetch({ query: input, limit: 1 })).first();\n        } catch (error) {\n            if (\n                error instanceof DiscordAPIError &&\n                typeof error.code == 'number' &&\n                IGNORED_ERRORS.includes(error.code)\n            ) {\n                return;\n            } else {\n                throw error;\n            }\n        }\n    }\n\n    public static async findRole(guild: Guild, input: string): Promise<Role> {\n        try {\n            let discordId = RegexUtils.discordId(input);\n            if (discordId) {\n                return await guild.roles.fetch(discordId);\n            }\n\n            let search = input.trim().toLowerCase().replace(/^@/, '');\n            let roles = await guild.roles.fetch();\n            return (\n                roles.find(role => role.name.toLowerCase() === search) ??\n                roles.find(role => role.name.toLowerCase().includes(search))\n            );\n        } catch (error) {\n            if (\n                error instanceof DiscordAPIError &&\n                typeof error.code == 'number' &&\n                IGNORED_ERRORS.includes(error.code)\n            ) {\n                return;\n            } else {\n                throw error;\n            }\n        }\n    }\n\n    public static async findTextChannel(\n        guild: Guild,\n        input: string\n    ): Promise<NewsChannel | TextChannel> {\n        try {\n            let discordId = RegexUtils.discordId(input);\n            if (discordId) {\n                let channel = await guild.channels.fetch(discordId);\n                if (channel instanceof NewsChannel || channel instanceof TextChannel) {\n                    return channel;\n                } else {\n                    return;\n                }\n            }\n\n            let search = input.trim().toLowerCase().replace(/^#/, '').replaceAll(' ', '-');\n            let channels = [...(await guild.channels.fetch()).values()]\n                .filter(channel => channel instanceof NewsChannel || channel instanceof TextChannel)\n                .map(channel => channel as NewsChannel | TextChannel);\n            return (\n                channels.find(channel => channel.name.toLowerCase() === search) ??\n                channels.find(channel => channel.name.toLowerCase().includes(search))\n            );\n        } catch (error) {\n            if (\n                error instanceof DiscordAPIError &&\n                typeof error.code == 'number' &&\n                IGNORED_ERRORS.includes(error.code)\n            ) {\n                return;\n            } else {\n                throw error;\n            }\n        }\n    }\n\n    public static async findVoiceChannel(\n        guild: Guild,\n        input: string\n    ): Promise<VoiceChannel | StageChannel> {\n        try {\n            let discordId = RegexUtils.discordId(input);\n            if (discordId) {\n                let channel = await guild.channels.fetch(discordId);\n                if (channel instanceof VoiceChannel || channel instanceof StageChannel) {\n                    return channel;\n                } else {\n                    return;\n                }\n            }\n\n            let search = input.trim().toLowerCase().replace(/^#/, '');\n            let channels = [...(await guild.channels.fetch()).values()]\n                .filter(\n                    channel => channel instanceof VoiceChannel || channel instanceof StageChannel\n                )\n                .map(channel => channel as VoiceChannel | StageChannel);\n            return (\n                channels.find(channel => channel.name.toLowerCase() === search) ??\n                channels.find(channel => channel.name.toLowerCase().includes(search))\n            );\n        } catch (error) {\n            if (\n                error instanceof DiscordAPIError &&\n                typeof error.code == 'number' &&\n                IGNORED_ERRORS.includes(error.code)\n            ) {\n                return;\n            } else {\n                throw error;\n            }\n        }\n    }\n\n    public static async findNotifyChannel(\n        guild: Guild,\n    ): Promise<TextChannel | NewsChannel> {\n        // Prefer the system channel\n        let systemChannel = guild.systemChannel;\n        if (systemChannel && PermissionUtils.canSend(systemChannel, true)) {\n            return systemChannel;\n        }\n\n        // Otherwise look for a bot channel\n        return (await guild.channels.fetch()).find(\n            channel =>\n                (channel instanceof TextChannel || channel instanceof NewsChannel) &&\n                PermissionUtils.canSend(channel, true)\n        ) as TextChannel | NewsChannel;\n    }\n}"],"names":["ClientUtils","FETCH_MEMBER_LIMIT","IGNORED_ERRORS","DiscordApiErrors","UnknownMessage","UnknownChannel","UnknownGuild","UnknownMember","UnknownUser","UnknownInteraction","MissingAccess","getGuild","client","discordId","RegexUtils","guilds","fetch","error","DiscordAPIError","code","includes","getChannel","channels","getUser","users","findAppCommand","name","commands","application","find","command","findMember","guild","input","members","tag","query","username","limit","member","user","discriminator","first","findRole","roles","search","trim","toLowerCase","replace","role","findTextChannel","channel","NewsChannel","TextChannel","replaceAll","values","filter","map","findVoiceChannel","VoiceChannel","StageChannel","findNotifyChannel","systemChannel","PermissionUtils","canSend"],"mappings":"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"}