{"version":3,"sources":["../../src/extensions/mufaroClient.ts"],"sourcesContent":["import {\n    ApplicationCommandDataResolvable,\n    Client,\n    ClientEvents,\n    Collection,\n    GatewayIntentBits,\n    Partials\n} from \"discord.js\";\nimport { CommandType } from \"../constants/Command\";\nimport glob from \"glob\";\nimport { promisify } from \"util\";\nimport { RegisterCommandsOptions } from \"../constants/client\";\nimport { Event } from \"./Event\";\nimport { Logger } from \"../services/logger\";\n\nconst globPromise = promisify(glob);\n\nexport class MufaroClient extends Client {\n    commands: Collection<string, CommandType> = new Collection();\n\n    private ready = false;\n\n    get clientReady() {\n        return this.ready;\n    }\n\n    constructor() {\n        super({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.MessageContent, GatewayIntentBits.GuildMessages, GatewayIntentBits.GuildMembers,\n            GatewayIntentBits.GuildMessageReactions, GatewayIntentBits.DirectMessages\n        ], partials: [Partials.Message, Partials.User, Partials.Channel, Partials.GuildMember] });\n    }\n\n    start() {\n        this.registerModules();\n        this.login(process.env.CLIENT_TOKEN);\n    }\n    async importFile(filePath: string) {\n        return (await import(filePath))?.default;\n    }\n\n    async registerCommands({ commands, guildId }: RegisterCommandsOptions) {\n        if (guildId) {\n            this.guilds.cache.get(guildId)?.commands.set(commands);\n            Logger.info(`Registered [ ${commands.length} ] commands in guild [ ${guildId} ]`);\n        } else {\n            this.application?.commands.set(commands);\n            Logger.info(`Registered [ ${commands.length} ] commands globally`);\n        }\n    }\n\n    async commandController() {\n        const slashCommands: ApplicationCommandDataResolvable[] = [];\n        const commandFiles = await globPromise(\n            `${__dirname}/../commands/*/*{.ts,.js}`\n        );\n        Logger.info(`Found [ ${commandFiles.length} ] commands`);\n        commandFiles.forEach(async (filePath) => {\n            const command: CommandType = await this.importFile(filePath);\n            if (!command.name) return;\n\n            this.commands.set(command.name, command);\n            slashCommands.push(command);\n        });\n\n        this.on(\"ready\", () => {\n            if (this.ready) return;\n            this.ready = true;\n            this.registerCommands({\n                commands: slashCommands,\n                guildId: process.env.guildId // remove that if you want to register commands globally\n            });\n        });\n    }\n\n    async eventController() {\n        const eventFiles = await globPromise(\n            `${__dirname}/../events/*{.ts,.js}`\n        );\n        eventFiles.forEach(async (filePath) => {\n            const event: Event<keyof ClientEvents> = await this.importFile(\n                filePath\n            );\n            this.on(event.event, event.run);\n        });\n    }\n\n    async registerModules() {\n        this.commandController();\n        this.eventController();\n    }\n\n}\n"],"names":["MufaroClient","globPromise","promisify","glob","Client","commands","Collection","ready","clientReady","constructor","intents","GatewayIntentBits","Guilds","MessageContent","GuildMessages","GuildMembers","GuildMessageReactions","DirectMessages","partials","Partials","Message","User","Channel","GuildMember","start","registerModules","login","process","env","CLIENT_TOKEN","importFile","filePath","default","registerCommands","guildId","guilds","cache","get","set","Logger","info","length","application","commandController","slashCommands","commandFiles","__dirname","forEach","command","name","push","on","eventController","eventFiles","event","run"],"mappings":"uFAiBaA,wCAAAA,wCAVN,yDAEU,6BACS,8BAGH,4jCAEvB,MAAMC,YAAcC,GAAAA,eAAS,EAACC,aAAI,CAE3B,OAAMH,qBAAqBI,iBAAM,CACpCC,SAA4C,IAAIC,qBAAU,AAAG,AAE7D,CAAQC,MAAQ,KAAK,AAAC,AAEtB,KAAIC,aAAc,CACd,OAAO,IAAI,CAACD,KAAK,AACrB,CAEAE,aAAc,CACV,KAAK,CAAC,CAAEC,QAAS,CAACC,4BAAiB,CAACC,MAAM,CAAED,4BAAiB,CAACE,cAAc,CAAEF,4BAAiB,CAACG,aAAa,CAAEH,4BAAiB,CAACI,YAAY,CACzIJ,4BAAiB,CAACK,qBAAqB,CAAEL,4BAAiB,CAACM,cAAc,CAC5E,CAAEC,SAAU,CAACC,mBAAQ,CAACC,OAAO,CAAED,mBAAQ,CAACE,IAAI,CAAEF,mBAAQ,CAACG,OAAO,CAAEH,mBAAQ,CAACI,WAAW,CAAC,AAAC,EAC3F,CAEAC,OAAQ,CACJ,IAAI,CAACC,eAAe,GACpB,IAAI,CAACC,KAAK,CAACC,QAAQC,GAAG,CAACC,YAAY,CACvC,CACA,MAAMC,WAAWC,QAAgB,CAAE,CAC/B,MAAQ,CAAA,MAAM,gBAAOA,0CAAP,YAAe,GAAIC,OACrC,CAEA,MAAMC,iBAAiB,CAAE5B,QAAQ,CAAE6B,OAAO,CAA2B,CAAE,CACnE,GAAIA,QAAS,CACT,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,GAAG,CAACH,UAAU7B,SAASiC,GAAG,CAACjC,UAC7CkC,cAAM,CAACC,IAAI,CAAC,CAAC,aAAa,EAAEnC,SAASoC,MAAM,CAAC,uBAAuB,EAAEP,QAAQ,EAAE,CAAC,CACpF,KAAO,CACH,IAAI,CAACQ,WAAW,EAAErC,SAASiC,GAAG,CAACjC,UAC/BkC,cAAM,CAACC,IAAI,CAAC,CAAC,aAAa,EAAEnC,SAASoC,MAAM,CAAC,oBAAoB,CAAC,CACrE,CAAC,AACL,CAEA,MAAME,mBAAoB,CACtB,MAAMC,cAAoD,EAAE,CAC5D,MAAMC,aAAe,MAAM5C,YACvB,CAAC,EAAE6C,UAAU,yBAAyB,CAAC,EAE3CP,cAAM,CAACC,IAAI,CAAC,CAAC,QAAQ,EAAEK,aAAaJ,MAAM,CAAC,WAAW,CAAC,EACvDI,aAAaE,OAAO,CAAC,MAAOhB,UAAa,CACrC,MAAMiB,QAAuB,MAAM,IAAI,CAAClB,UAAU,CAACC,UACnD,GAAI,CAACiB,QAAQC,IAAI,CAAE,MAAO,CAE1B,IAAI,CAAC5C,QAAQ,CAACiC,GAAG,CAACU,QAAQC,IAAI,CAAED,SAChCJ,cAAcM,IAAI,CAACF,QACvB,GAEA,IAAI,CAACG,EAAE,CAAC,QAAS,IAAM,CACnB,GAAI,IAAI,CAAC5C,KAAK,CAAE,MAAO,AACvB,CAAA,IAAI,CAACA,KAAK,CAAG,IAAI,CACjB,IAAI,CAAC0B,gBAAgB,CAAC,CAClB5B,SAAUuC,cACVV,QAASP,QAAQC,GAAG,CAACM,OAAO,AAChC,EACJ,EACJ,CAEA,MAAMkB,iBAAkB,CACpB,MAAMC,WAAa,MAAMpD,YACrB,CAAC,EAAE6C,UAAU,qBAAqB,CAAC,EAEvCO,WAAWN,OAAO,CAAC,MAAOhB,UAAa,CACnC,MAAMuB,MAAmC,MAAM,IAAI,CAACxB,UAAU,CAC1DC,UAEJ,IAAI,CAACoB,EAAE,CAACG,MAAMA,KAAK,CAAEA,MAAMC,GAAG,CAClC,EACJ,CAEA,MAAM9B,iBAAkB,CACpB,IAAI,CAACkB,iBAAiB,GACtB,IAAI,CAACS,eAAe,EACxB,CAEJ"}