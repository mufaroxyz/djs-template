Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"MufaroClient",{enumerable:true,get:()=>MufaroClient});const _discordJs=require("discord.js");const _glob=_interopRequireDefault(require("glob"));const _util=require("util");const _logger=require("../services/logger");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap;var cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj}}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj)}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc)}else{newObj[key]=obj[key]}}}newObj.default=obj;if(cache){cache.set(obj,newObj)}return newObj}const globPromise=(0,_util.promisify)(_glob.default);class MufaroClient extends _discordJs.Client{commands=new _discordJs.Collection;ready=false;get clientReady(){return this.ready}constructor(){super({intents:[_discordJs.GatewayIntentBits.Guilds,_discordJs.GatewayIntentBits.MessageContent,_discordJs.GatewayIntentBits.GuildMessages,_discordJs.GatewayIntentBits.GuildMembers,_discordJs.GatewayIntentBits.GuildMessageReactions,_discordJs.GatewayIntentBits.DirectMessages],partials:[_discordJs.Partials.Message,_discordJs.Partials.User,_discordJs.Partials.Channel,_discordJs.Partials.GuildMember]})}start(){this.registerModules();this.login(process.env.CLIENT_TOKEN)}async importFile(filePath){return(await Promise.resolve(filePath).then(p=>_interopRequireWildcard(require(p))))?.default}async registerCommands({commands,guildId}){if(guildId){this.guilds.cache.get(guildId)?.commands.set(commands);_logger.Logger.info(`Registered [ ${commands.length} ] commands in guild [ ${guildId} ]`)}else{this.application?.commands.set(commands);_logger.Logger.info(`Registered [ ${commands.length} ] commands globally`)}}async commandController(){const slashCommands=[];const commandFiles=await globPromise(`${__dirname}/../commands/*/*{.ts,.js}`);_logger.Logger.info(`Found [ ${commandFiles.length} ] commands`);commandFiles.forEach(async filePath=>{const command=await this.importFile(filePath);if(!command.name)return;this.commands.set(command.name,command);slashCommands.push(command)});this.on("ready",()=>{if(this.ready)return;this.ready=true;this.registerCommands({commands:slashCommands,guildId:process.env.guildId})})}async eventController(){const eventFiles=await globPromise(`${__dirname}/../events/*{.ts,.js}`);eventFiles.forEach(async filePath=>{const event=await this.importFile(filePath);this.on(event.event,event.run)})}async registerModules(){this.commandController();this.eventController()}}
//# sourceMappingURL=mufaroClient.js.map